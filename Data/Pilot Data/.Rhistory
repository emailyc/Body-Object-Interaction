if (file.exists("multinom.rds"))
{
multinom <- readRDS(file = "multinom.rds");
} else
{
multinomTime <- system.time(multinom <- train(classe ~ ., data = trainPC, method = "multinom", metric = metric, trControl= tc));
saveRDS(multinom, file = "multinom.rds");
saveRDS(multinomTime, file = "multinomTime.rds");
}
if (file.exists("ctree.rds"))
{
ctree <- readRDS(file = "ctree.rds");
} else
{
ctreeTime <-system.time(ctree <- train(classe ~ ., data = trainPC, method = "rpart", metric = metric, trControl= tc)); #decision tree
saveRDS(ctree, file = "ctree.rds");
saveRDS(ctreeTime, file = "ctreeTime.rds");
}
if (file.exists("treebag.rds"))
{
treebag <- readRDS(file = "treebag.rds");
} else
{
treebagGrid <- expand.grid(.mtry = ncol(trainPC) - 1);
treebagTime <- system.time(treebag <- train(classe ~ ., data = trainPC, method = "rf", metric = metric, tuneGrid = treebagGrid, trControl= tc)); #bagging
saveRDS(treebag, file = "treebag.rds");
saveRDS(treebagTime, file = "treebagTime.rds");
}
if (file.exists("rf.rds"))
{
rf <- readRDS(file = "rf.rds");
} else
{
rfGrid <- expand.grid(.mtry = sqrt(ncol(trainPC) - 1));
rfTime <- system.time(rf <- train(classe ~ ., data = trainPC, method = "rf", metric = metric, tuneGrid = rfGrid, trControl= tc));   #Random Forest
saveRDS(rf, file = "rf.rds");
saveRDS(rfTime, file = "rfTime.rds");
}
if (file.exists("NN.rds"))
{
NN <- readRDS(file = "NN.rds");
} else
{
nnetGrid <-  expand.grid(
size = seq(from = 1, to = 10, by = 1),
decay = c(0.5, 0.1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7));
NNTime <- system.time(NN <- train(classe ~ ., data = trainPC, method = "nnet", metric = metric, tuneGrid = nnetGrid, trControl= tc, verbose=FALSE));
saveRDS(NN, file = "NN.rds");
saveRDS(NNTime, file = "NNTime.rds");
}
#remember to run this after training model(s)!!!
parallel::stopCluster(cl);
results <- resamples(list(NaiveBayes = nb,
KNearestNeighbor = knn,
MultinomialLogit = multinom,
DecisionTree = ctree,
TreeBagging = treebag,
RandomForest = rf,
NeuroNetwork = NN));
results$metrics
summaryStat <- summary(results)$statistics;
scales <- list(x=list(relation="free"), y=list(relation="free"));
metrics <- c("Accuracy", "AUC", "logLoss", "Mean_F1");
lattice::bwplot(results,
scales=scales,
metric=metrics,
main="Model Performances");
lattice::dotplot(results, scales=scales,  metric=metrics, main="Model Performances");
lattice::densityplot(results, scales=scales, pch = "|", metric=metrics, auto.key=TRUE);
confusionMatrix(predict(knn), trainPC$classe);
confusionMatrix(predict(knn, testPC), testPC$classe); #don't use testPC until end of report
#talk about why choose specific model first.
history = readxl::read_xlsx(file.choose())
View(history)
View(history[status == "Filled",])
View(history["status" == "Filled",])
View(history)
View(history[history$status == "Filled",])
history = readxl::read_xlsx(file.choose())
history[history$status == "Filled",]
history = na.omit(history)
View(history)
history =history[history$status == "Filled",]
View(history)
sum(history$`AvgTrading Price`) / sum(history$Filled)
sum(history$`AvgTrading Price`)
class(sum(history$`AvgTrading Price`))
class(history$`AvgTrading Price`)
sum(as.numeric(history$`AvgTrading Price`)) / sum(as.numeric(history$Filled)))
sum(as.numeric(history$`AvgTrading Price`)) / sum(as.numeric(history$Filled))
sum(as.numeric(history$Filled))
mean(sum(as.numeric(history$`AvgTrading Price`)))
0.049995/4.950
0.103843-0.0085
0.0103843-0.0085
sum(history$Total)
sum(as.numeric(history$Total))
total = sum(as.numeric(history$Total))
total / 0.103843
0.103843 / totasl
0.103843 / total
total / 0.0103843
total / 0.0103843 - total / 0.0085
total / 0.0103843 - total / 0.00877
total / 0.0103843 - total / 0.0086
106-83.99
22.01/106
0.55/0.004
0.55/0.008
if (!require(devtools)) install.packages("devtools")
install.packages(c("BradleyTerry2", "caret", "checkmate", "classInt", "dbplyr", "diffobj", "digest", "dplyr", "DT", "e1071", "ellipsis", "evaluate", "fields", "fs", "gdtools", "ggplot2", "gower", "gss", "hexbin", "ipred", "jomo", "knitr", "labelled", "Lahman", "lmtest", "markdown", "mice", "mime", "mvtnorm", "numDeriv", "openssl", "ordinal", "pillar", "plotrix", "prabclus", "pROC", "processx", "progress", "quantreg", "qvcalc", "rcmdcheck", "remotes", "rlang", "rmarkdown", "robustbase", "spls", "svglite", "tibble", "tinytex", "TSP", "visNetwork", "xfun", "XML", "zoo"))
devtools::install_github("mdsteiner/ShinyPsych",
build = TRUE,
build_opts = c("--no-resave-data", "--no-manual"))
ShinyPsych_Guide()
load("/media/chung/C9E1-0BB6/BOI Experiment/Data/.RData")
View(Data)
View(data1)
View(data1[,c("Left.Reading", "Stimuli")])
data1 = data1[,c("Left.Reading", "Stimuli")]
data1 = read.csv(sep = ',', file.choose())
View(data1)
data1 = data1[, c("Left.Reading", "Right.Reading", "Stimuli")]
install.packages("dplyr")
library(dplyr)
hihi = filter(data1, Left.Reading > 0 & Right.Reading > 0 & Stimuli != -1)
View(hihi)
hihi = filter(data1, Left.Reading > 0 && Right.Reading > 0 && Stimuli != -1)
View(hihi)
hihi = filter(data1, Left.Reading > 0)
View(hihi)
hihi = filter(data1, Left.Reading > 0 | Right.Reading > 0 | Stimuli != -1)
data1 = filter(data1, Left.Reading > 0 | Right.Reading > 0 | Stimuli != -1)
hihi = which(data1$Stimuli == -1)
View(hihi)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
start_end = data.frame(start = numeric(), end = numeric())
start_end
length(hihi)
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 0:length(pressure_rows) - 1)
{
if (pressure_rows[i+1] != pressure_rows[i] + 1)
{
rbind(start_end, c(start, pressure_rows[i] ))
start =  pressure_rows[i+1]
}
}
head(pressure_rows)
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:length(pressure_rows) - 1)
{
if (pressure_rows[i+1] != pressure_rows[i] + 1)
{
rbind(start_end, c(start, pressure_rows[i] ))
start =  pressure_rows[i+1]
}
}
pressure_rows[1 + 1]
pressure_rows[1] + 1
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
if (pressure_rows[i+1] != pressure_rows[i] + 1)
{
rbind(start_end, c(start, pressure_rows[i] ))
start =  pressure_rows[i+1]
}
}
View(start_end)
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
if (pressure_rows[i+1] != pressure_rows[i] + 1)
{
start_end = rbind(start_end, c(start, pressure_rows[i] ))
start =  pressure_rows[i+1]
}
}
View(start_end)
View(pressure_rows)
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
start_end = rbind(start_end, c(start, this_index ))
start =  next_index
}
}
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
start_end = rbind(start_end, c(start, this_index ))
start =  next_index
}
print(i)
}
start_end = data.frame(start = numeric(), end = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
View(pressure_rows)
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
tail(start_end[[2]], 1)
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
start_end = rbind(start_end, c(1 + which( tail(start_end[[2]], 1)), tail(pressure_rows, 1)))
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
start_end = rbind(start_end, c(1 + which(pressure_rows == tail(start_end[[2]], 1)), tail(pressure_rows, 1)))
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1))
start_end = rbind(start_end, c(1 + pressure_rows[index_of_start_of_final_chunk], tail(pressure_rows, 1)))
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1))
start_end = rbind(start_end, c(1 + index_of_start_of_final_chunk, tail(pressure_rows, 1)))
start_end = data.frame('start' = numeric(), 'end' = numeric())
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
print(c(start, this_index))
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1)) + 1
start_end = rbind(start_end, c(pressure_rows[index_of_start_of_final_chunk], tail(pressure_rows, 1)))
start_end = matrix(ncol = 2, nrow = 0)
names <- c("start", "end")
colnames(start_end) <- names
pressure_rows = which(data1$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1)) + 1
start_end = rbind(start_end, c(pressure_rows[index_of_start_of_final_chunk], tail(pressure_rows, 1)))
pressure_data = read.csv(sep = ',', file.choose())
pressure_data = pressure_data[, c("Left.Reading", "Right.Reading", "Stimuli")]
pressure_data = filter(pressure_data, Left.Reading > 0 | Right.Reading > 0 | Stimuli != -1)
pressure_data = read.csv(sep = ',', file.choose())
start_end = matrix(ncol = 2, nrow = 0)
names <- c("from", "to")
colnames(start_end) <- names
pressure_rows = which(pressure_data$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1)) + 1
start_end = rbind(start_end, c(pressure_rows[index_of_start_of_final_chunk], tail(pressure_rows, 1)))
leftRightSum = pressure_data$Left.Reading + pressure_data$Right.Reading
max_pressure = data.frame('start' = numeric(), 'end' = numeric())
leftRightSum = pressure_data$Left.Reading + pressure_data$Right.Reading
getMaxPressure <- function(x)
{
from <- x[1]
to <- x[2]
periodMax = max(leftRightSum[from:to])
return(periodMax)
}
hihi = apply(start_end, 1, getMaxPressure)
View(hihi)
sequences = read.csv(sep = ',', file.choose())
View(sequences)
str_extract(sequences[1], "Low_BOI")
install.packages("stringr")
llibrary(stringr)
library(stringr)
str_extract(sequences[1], "Low_BOI")
vsequences[1]
sequences[1]
sequences[[1]]
sequences = read.csv(sep = ',', file.choose(), header = FALSE)
View(sequences)
View(sequences[1])
sequences =readLines()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
con <- file(file.choose(), open="r")
sequences =readLines(file(con, open = 'r'))
sequences =readLines(file(con))
sequences = read.csv(sep = '\n', file.choose())
sequences[1]
sequences = read.csv(sep = '\n', file.choose(), header = FALSE, strip.white = TRUE)
sequences[1]
sequences$V1[1]
pressure_data = read.csv(sep = ',', file.choose())
which(grepl(sequences$V1[1], 'Abstract'))
grepl(sequences$V1[1], 'Abstract')
grepl(sequences$V1[1], 'Abstract')
sequences$V1[1]
character(sequences$V1[1])
sequences$V1[2]
as.character(sequences$V1[2])
sequences$V1 = as.character(sequences$V1)
sequences$V1[1]
grepl(sequences$V1[1], 'Abstract')
grepl(sequences$V1[1], 'Abstract', fixed = TRUE)
character(sequences$V1[1])
sequences$V1[1]
sequences$V1[2]
grepl(sequences$V1[1], '')
grepl("\\Abstract\\NOBLE.wav", 'A')
grepl("Abstract", "\\Abstract\\NOBLE.wav")
condition = vector(mode="character", length=length(peakPressures))
pressure_data = read.csv(sep = ',', file.choose())
pressure_data = pressure_data[, c("Left.Reading", "Right.Reading", "Stimuli")]
pressure_data = filter(pressure_data, Left.Reading > 0 | Right.Reading > 0 | Stimuli != -1)
sequences = read.csv(sep = '\n', file.choose(), header = FALSE, strip.white = TRUE)$V1
sequences = as.character(sequences$V1)
sequences = read.csv(sep = '\n', file.choose(), header = FALSE, strip.white = TRUE)
sequences = as.character(sequences$V1)
pressure_data = read.csv(sep = ',', file.choose())
start_end = matrix(ncol = 2, nrow = 0)
names <- c("from", "to")
colnames(start_end) <- names
pressure_rows = which(pressure_data$Stimuli == -1)
start = 0
for (i in 1:(length(pressure_rows) - 1))
{
this_index = pressure_rows[i]
next_index = pressure_rows[i+1]
if (next_index != this_index + 1)
{
start_end = rbind(start_end, c(start, this_index))
start =  next_index
}
}
index_of_start_of_final_chunk = which(pressure_rows == tail(start_end[[2]], 1)) + 1
start_end = rbind(start_end, c(pressure_rows[index_of_start_of_final_chunk], tail(pressure_rows, 1)))
max_pressure = data.frame('start' = numeric(), 'end' = numeric())
leftRightSum = pressure_data$Left.Reading + pressure_data$Right.Reading
getMaxPressure <- function(x)
{
from <- x[1]
to <- x[2]
periodMax = max(leftRightSum[from:to])
return(periodMax)
}
peakPressures = apply(start_end, 1, getMaxPressure)
condition = vector(mode="character", length=length(peakPressures))
conditions <- c('Abstract', "High_BOI", "Low_BOI")
grepl("Abstract", ssequences)
grepl("Abstract", sequences)
which( grepl("Abstract", sequences) \)
which( grepl("Abstract", sequences) \
which( grepl("Abstract", sequences) )
condition = vector(mode="character", length=length(peakPressures))
conditions <- c('Abstract', "High_BOI", "Low_BOI")
for (i in conditions)
{
index = which( grepl(i, sequences) )
condition[index] = i
}
View(condition)
output = data.frame(peakPressures, condition)
length(condition)
View(pressure_data)
length(peakPressures)
sequences = sequences[5:,]
sequences = sequences[-c(1:4),]
sequences = sequences[-c(1:4)]
output = data.frame(peakPressures, condition)
condition = vector(mode="character", length=length(peakPressures))
conditions <- c('Abstract', "High_BOI", "Low_BOI")
for (i in conditions)
{
index = which( grepl(i, sequences) )
condition[index] = i
}
output = data.frame(peakPressures, condition)
length(sequences)
length(pressure_data)
length(peakPressures)
output = data.frame(peakPressures, condition[0:length(peakPressures)])
View(output)
mean(output$peakPressures[output$condition.0.length.peakPressures.. == "Abstract"])
mean(output$peakPressures[output$condition.0.length.peakPressures.. == "Low_BOI"])
mean(output$peakPressures[output$condition.0.length.peakPressures.. == "High_BOI"])
max(output$peakPressures[output$condition.0.length.peakPressures.. == "Abstract"])
max(output$peakPressures[output$condition.0.length.peakPressures.. == "Low_BOI"])
max(output$peakPressures[output$condition.0.length.peakPressures.. == "High_BOI"])
pressure_percent(0, 100*(86.11323/77.00089), 100* (78.85395/77.00089) )
pressure_percent = c(0, 100*(86.11323/77.00089), 100* (78.85395/77.00089) )
pressure_percent
pressure_data
pressure_data
pressure_data
pressure_data = read.csv(sep = ',', file.choose())
speed_data = c(0, 100*((8964140-8229900)/4894620), 100*((17539980-16687180)/4894620))
speed_data
graphDF = data.frame(pressure_percent, speed_data)
graphDF
library(ggplot2)
ggplot(data = graphDF, aes(x =  c('Abstract', "Low_BOI", "High_BOI")))
ggplot(data = graphDF, aes(x =  c('Abstract', "Low_BOI", "High_BOI"))) + geom_line(graphDF$pressure_percent)
ggplot(data = graphDF, aes(x =  c('Abstract', "Low_BOI", "High_BOI"))) + geom_line(aes = (graphDF$pressure_percent))
ggplot(data = graphDF, aes(x =  c('Abstract', "Low_BOI", "High_BOI"))) + geom_line(aes(y = graphDF$pressure_percent))
